{"version":3,"sources":["webpack:///main.33f53d003b418046d7e5.js","webpack:///./src/index.js","webpack:///./~/numeral/numeral.js"],"names":["webpackJsonp","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_numeral","_numeral2","courseValue","format","console","log","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Numeral","number","this","_value","toFixed","value","maxDecimals","roundingFunction","optionals","boundedPrecision","optionalsRegExp","power","output","splitValue","toString","split","minDecimals","length","Math","min","max","pow","RegExp","replace","formatNumeral","n","options","zeroFormat","nullFormat","indexOf","formatCurrency","formatPercentage","formatTime","formatBytes","formatOrdinal","formatNumber","spliceIndex","symbolIndex","openParenIndex","minusSignIndex","space","splice","languages","currentLanguage","currency","symbol","join","suffixes","byteSuffixes","iec","bytes","suffix","ordinal","hours","floor","minutes","seconds","round","abs","w","precision","thousands","negP","signed","optDec","abbr","abbrK","abbrM","abbrB","abbrT","abbrForce","d","neg","slice","abbreviations","trillion","billion","million","thousand","delimiters","decimal","Number","unformatNumeral","string","thousandRegExp","millionRegExp","billionRegExp","trillionRegExp","stringOriginal","bytesMultiplier","unformatTime","match","ceil","timeArray","loadLanguage","key","values","multiplier","x","parts","correctionFactor","args","Array","prototype","call","arguments","reduce","prev","next","mp","mn","Infinity","numeral","VERSION","defaults","defaultFormat","input","isNumeral","fn","unformat","version","language","toLowerCase","Error","reset","property","languageData","b","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","trim","e","substr","callback","TypeError","t","Object","len","k","clone","inputString","undefined","valueOf","set","add","cback","accum","curr","currI","O","corrFactor","subtract","multiply","divide","difference","ender","apply"],"mappings":"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","file":"main.33f53d003b418046d7e5.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t__webpack_require__(1);\n\t\n\tvar _numeral = __webpack_require__(5);\n\t\n\tvar _numeral2 = _interopRequireDefault(_numeral);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar courseValue = (0, _numeral2.default)(1000).format('$0,0.00');\n\tconsole.log('I would pay ' + courseValue + ' for this awesome course!'); // eslint-disable-line no-console\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! @preserve\n\t * numeral.js\n\t * version : 1.5.6\n\t * author : Adam Draper\n\t * license : MIT\n\t * http://adamwdraper.github.com/Numeral-js/\n\t */\n\t\n\t(function() {\n\t\n\t    /************************************\n\t        Variables\n\t    ************************************/\n\t\n\t    var numeral,\n\t        VERSION = '1.5.6',\n\t        // internal storage for language config files\n\t        languages = {},\n\t        defaults = {\n\t            currentLanguage: 'en',\n\t            zeroFormat: null,\n\t            nullFormat: null,\n\t            defaultFormat: '0,0'\n\t        },\n\t        options = {\n\t            currentLanguage: defaults.currentLanguage,\n\t            zeroFormat: defaults.zeroFormat,\n\t            nullFormat: defaults.nullFormat,\n\t            defaultFormat: defaults.defaultFormat\n\t        },\n\t        byteSuffixes = {\n\t            bytes: ['B','KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n\t            iec: ['B','KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n\t        };\n\t\n\t\n\t    /************************************\n\t        Constructors\n\t    ************************************/\n\t\n\t\n\t    // Numeral prototype object\n\t    function Numeral(number) {\n\t        this._value = number;\n\t    }\n\t\n\t    /**\n\t     * Implementation of toFixed() that treats floats more like decimals\n\t     *\n\t     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n\t     * problems for accounting- and finance-related software.\n\t     */\n\t    function toFixed (value, maxDecimals, roundingFunction, optionals) {\n\t        var splitValue = value.toString().split('.'),\n\t            minDecimals = maxDecimals - (optionals || 0),\n\t            boundedPrecision,\n\t            optionalsRegExp,\n\t            power,\n\t            output;\n\t\n\t        // Use the smallest precision value possible to avoid errors from floating point representation\n\t        if (splitValue.length === 2) {\n\t          boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n\t        } else {\n\t          boundedPrecision = minDecimals;\n\t        }\n\t\n\t        power = Math.pow(10, boundedPrecision);\n\t\n\t        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n\t        // Multiply up by precision, round accurately, then divide and use native toFixed():\n\t        output = (roundingFunction(value * power) / power).toFixed(boundedPrecision);\n\t\n\t        if (optionals > maxDecimals - boundedPrecision) {\n\t            optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n\t            output = output.replace(optionalsRegExp, '');\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    /************************************\n\t        Formatting\n\t    ************************************/\n\t\n\t    // determine what type of formatting we need to do\n\t    function formatNumeral(n, format, roundingFunction) {\n\t        var output;\n\t\n\t        if (n._value === 0 && options.zeroFormat !== null) {\n\t            output = options.zeroFormat;\n\t        } else if (n._value === null && options.nullFormat !== null) {\n\t            output = options.nullFormat;\n\t        } else {\n\t            // figure out what kind of format we are dealing with\n\t            if (format.indexOf('$') > -1) {\n\t                output = formatCurrency(n, format, roundingFunction);\n\t            } else if (format.indexOf('%') > -1) {\n\t                output = formatPercentage(n, format, roundingFunction);\n\t            } else if (format.indexOf(':') > -1) {\n\t                output = formatTime(n, format);\n\t            } else if (format.indexOf('b') > -1 || format.indexOf('ib') > -1) {\n\t                output = formatBytes(n, format, roundingFunction);\n\t            } else if (format.indexOf('o') > -1) {\n\t                output = formatOrdinal(n, format, roundingFunction);\n\t            } else {\n\t                output = formatNumber(n._value, format, roundingFunction);\n\t            }\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    function formatCurrency(n, format, roundingFunction) {\n\t        var symbolIndex = format.indexOf('$'),\n\t            openParenIndex = format.indexOf('('),\n\t            minusSignIndex = format.indexOf('-'),\n\t            space = '',\n\t            spliceIndex,\n\t            output;\n\t\n\t        // check for space before or after currency\n\t        if (format.indexOf(' $') > -1) {\n\t            space = ' ';\n\t            format = format.replace(' $', '');\n\t        } else if (format.indexOf('$ ') > -1) {\n\t            space = ' ';\n\t            format = format.replace('$ ', '');\n\t        } else {\n\t            format = format.replace('$', '');\n\t        }\n\t\n\t        // format the number\n\t        output = formatNumber(n._value, format, roundingFunction, false);\n\t\n\t        // position the symbol\n\t        if (symbolIndex <= 1) {\n\t            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n\t                output = output.split('');\n\t                spliceIndex = 1;\n\t                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {\n\t                    // the symbol appears before the \"(\" or \"-\"\n\t                    spliceIndex = 0;\n\t                }\n\t                output.splice(spliceIndex, 0, languages[options.currentLanguage].currency.symbol + space);\n\t                output = output.join('');\n\t            } else {\n\t                output = languages[options.currentLanguage].currency.symbol + space + output;\n\t            }\n\t        } else {\n\t            if (output.indexOf(')') > -1) {\n\t                output = output.split('');\n\t                output.splice(-1, 0, space + languages[options.currentLanguage].currency.symbol);\n\t                output = output.join('');\n\t            } else {\n\t                output = output + space + languages[options.currentLanguage].currency.symbol;\n\t            }\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    function formatPercentage(n, format, roundingFunction) {\n\t        var space = '',\n\t            output,\n\t            value = n._value * 100;\n\t\n\t        // check for space before %\n\t        if (format.indexOf(' %') > -1) {\n\t            space = ' ';\n\t            format = format.replace(' %', '');\n\t        } else {\n\t            format = format.replace('%', '');\n\t        }\n\t\n\t        output = formatNumber(value, format, roundingFunction);\n\t\n\t        if (output.indexOf(')') > -1) {\n\t            output = output.split('');\n\t            output.splice(-1, 0, space + '%');\n\t            output = output.join('');\n\t        } else {\n\t            output = output + space + '%';\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    function formatBytes(n, format, roundingFunction) {\n\t        var output,\n\t            suffixes = format.indexOf('ib') > -1 ? byteSuffixes.iec : byteSuffixes.bytes,\n\t            value = n._value,\n\t            suffix = '',\n\t            power,\n\t            min,\n\t            max;\n\t\n\t        // check for space before\n\t        if (format.indexOf(' b') > -1 || format.indexOf(' ib') > -1) {\n\t            suffix = ' ';\n\t            format = format.replace(' ib', '').replace(' b', '');\n\t        } else {\n\t            format = format.replace('ib', '').replace('b', '');\n\t        }\n\t\n\t        for (power = 0; power <= suffixes.length; power++) {\n\t            min = Math.pow(1024, power);\n\t            max = Math.pow(1024, power + 1);\n\t\n\t            if (value === null || value === 0 || value >= min && value < max) {\n\t                suffix += suffixes[power];\n\t\n\t                if (min > 0) {\n\t                    value = value / min;\n\t                }\n\t\n\t                break;\n\t            }\n\t        }\n\t\n\t        output = formatNumber(value, format, roundingFunction);\n\t\n\t        return output + suffix;\n\t    }\n\t\n\t    function formatOrdinal(n, format, roundingFunction) {\n\t        var output,\n\t            ordinal = '';\n\t\n\t        // check for space before\n\t        if (format.indexOf(' o') > -1) {\n\t            ordinal = ' ';\n\t            format = format.replace(' o', '');\n\t        } else {\n\t            format = format.replace('o', '');\n\t        }\n\t\n\t        ordinal += languages[options.currentLanguage].ordinal(n._value);\n\t\n\t        output = formatNumber(n._value, format, roundingFunction);\n\t\n\t        return output + ordinal;\n\t    }\n\t\n\t    function formatTime(n) {\n\t        var hours = Math.floor(n._value / 60 / 60),\n\t            minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),\n\t            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n\t\n\t        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n\t    }\n\t\n\t    function formatNumber(value, format, roundingFunction) {\n\t        var negP = false,\n\t            signed = false,\n\t            optDec = false,\n\t            abbr = '',\n\t            abbrK = false, // force abbreviation to thousands\n\t            abbrM = false, // force abbreviation to millions\n\t            abbrB = false, // force abbreviation to billions\n\t            abbrT = false, // force abbreviation to trillions\n\t            abbrForce = false, // force abbreviation\n\t            abs,\n\t            min,\n\t            max,\n\t            power,\n\t            w,\n\t            precision,\n\t            thousands,\n\t            d = '',\n\t            neg = false;\n\t\n\t        if (value === null) {\n\t            value = 0;\n\t        }\n\t\n\t        abs = Math.abs(value);\n\t\n\t        // see if we should use parentheses for negative number or if we should prefix with a sign\n\t        // if both are present we default to parentheses\n\t        if (format.indexOf('(') > -1) {\n\t            negP = true;\n\t            format = format.slice(1, -1);\n\t        } else if (format.indexOf('+') > -1) {\n\t            signed = true;\n\t            format = format.replace(/\\+/g, '');\n\t        }\n\t\n\t        // see if abbreviation is wanted\n\t        if (format.indexOf('a') > -1) {\n\t            // check if abbreviation is specified\n\t            abbrK = format.indexOf('aK') >= 0;\n\t            abbrM = format.indexOf('aM') >= 0;\n\t            abbrB = format.indexOf('aB') >= 0;\n\t            abbrT = format.indexOf('aT') >= 0;\n\t            abbrForce = abbrK || abbrM || abbrB || abbrT;\n\t\n\t            // check for space before abbreviation\n\t            if (format.indexOf(' a') > -1) {\n\t                abbr = ' ';\n\t            }\n\t\n\t            format = format.replace(new RegExp(abbr + 'a[KMBT]?'), '');\n\t\n\t            if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n\t                // trillion\n\t                abbr = abbr + languages[options.currentLanguage].abbreviations.trillion;\n\t                value = value / Math.pow(10, 12);\n\t            } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n\t                // billion\n\t                abbr = abbr + languages[options.currentLanguage].abbreviations.billion;\n\t                value = value / Math.pow(10, 9);\n\t            } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n\t                // million\n\t                abbr = abbr + languages[options.currentLanguage].abbreviations.million;\n\t                value = value / Math.pow(10, 6);\n\t            } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n\t                // thousand\n\t                abbr = abbr + languages[options.currentLanguage].abbreviations.thousand;\n\t                value = value / Math.pow(10, 3);\n\t            }\n\t        }\n\t\n\t\n\t        if (format.indexOf('[.]') > -1) {\n\t            optDec = true;\n\t            format = format.replace('[.]', '.');\n\t        }\n\t\n\t        w = value.toString().split('.')[0];\n\t        precision = format.split('.')[1];\n\t        thousands = format.indexOf(',');\n\t\n\t        if (precision) {\n\t            if (precision.indexOf('[') > -1) {\n\t                precision = precision.replace(']', '');\n\t                precision = precision.split('[');\n\t                d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n\t            } else {\n\t                d = toFixed(value, precision.length, roundingFunction);\n\t            }\n\t\n\t            w = d.split('.')[0];\n\t\n\t            if (d.indexOf('.') > -1) {\n\t                d = languages[options.currentLanguage].delimiters.decimal + d.split('.')[1];\n\t            } else {\n\t                d = '';\n\t            }\n\t\n\t            if (optDec && Number(d.slice(1)) === 0) {\n\t                d = '';\n\t            }\n\t        } else {\n\t            w = toFixed(value, null, roundingFunction);\n\t        }\n\t\n\t        // format number\n\t        if (w.indexOf('-') > -1) {\n\t            w = w.slice(1);\n\t            neg = true;\n\t        }\n\t\n\t        if (thousands > -1) {\n\t            w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[options.currentLanguage].delimiters.thousands);\n\t        }\n\t\n\t        if (format.indexOf('.') === 0) {\n\t            w = '';\n\t        }\n\t\n\t        return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((abbr) ? abbr : '') + ((negP && neg) ? ')' : '');\n\t    }\n\t\n\t\n\t    /************************************\n\t        Unformatting\n\t    ************************************/\n\t\n\t    // revert to number\n\t    function unformatNumeral(n, string) {\n\t        var stringOriginal = string,\n\t            thousandRegExp,\n\t            millionRegExp,\n\t            billionRegExp,\n\t            trillionRegExp,\n\t            bytesMultiplier = false,\n\t            power,\n\t            value;\n\t\n\t        if (string.indexOf(':') > -1) {\n\t            value = unformatTime(string);\n\t        } else {\n\t            if (string === options.zeroFormat || string === options.nullFormat) {\n\t                value = 0;\n\t            } else {\n\t                if (languages[options.currentLanguage].delimiters.decimal !== '.') {\n\t                    string = string.replace(/\\./g, '').replace(languages[options.currentLanguage].delimiters.decimal, '.');\n\t                }\n\t\n\t                // see if abbreviations are there so that we can multiply to the correct number\n\t                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                millionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                billionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t\n\t                // see if bytes are there so that we can multiply to the correct number\n\t                for (power = 1; power <= byteSuffixes.bytes.length; power++) {\n\t                    bytesMultiplier = ((string.indexOf(byteSuffixes.bytes[power]) > -1) || (string.indexOf(byteSuffixes.iec[power]) > -1))? Math.pow(1024, power) : false;\n\t\n\t                    if (bytesMultiplier) {\n\t                        break;\n\t                    }\n\t                }\n\t\n\t                // do some math to create our number\n\t                value = bytesMultiplier ? bytesMultiplier : 1;\n\t                value *= stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1;\n\t                value *= stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1;\n\t                value *= stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1;\n\t                value *= stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1;\n\t                // check for percentage\n\t                value *= string.indexOf('%') > -1 ? 0.01 : 1;\n\t                // check for negative number\n\t                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\t                // remove non numbers\n\t                value *= Number(string.replace(/[^0-9\\.]+/g, ''));\n\t                // round if we are talking about bytes\n\t                value = bytesMultiplier ? Math.ceil(value) : value;\n\t            }\n\t        }\n\t\n\t        n._value = value;\n\t\n\t        return n._value;\n\t    }\n\t    function unformatTime(string) {\n\t        var timeArray = string.split(':'),\n\t            seconds = 0;\n\t        // turn hours and minutes into seconds and add them all up\n\t        if (timeArray.length === 3) {\n\t            // hours\n\t            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n\t            // minutes\n\t            seconds = seconds + (Number(timeArray[1]) * 60);\n\t            // seconds\n\t            seconds = seconds + Number(timeArray[2]);\n\t        } else if (timeArray.length === 2) {\n\t            // minutes\n\t            seconds = seconds + (Number(timeArray[0]) * 60);\n\t            // seconds\n\t            seconds = seconds + Number(timeArray[1]);\n\t        }\n\t        return Number(seconds);\n\t    }\n\t\n\t\n\t    /************************************\n\t        Top Level Functions\n\t    ************************************/\n\t\n\t    numeral = function(input) {\n\t        if (numeral.isNumeral(input)) {\n\t            input = input.value();\n\t        } else if (input === 0 || typeof input === 'undefined') {\n\t            input = 0;\n\t        } else if (input === null) {\n\t            input = null;\n\t        } else if (!Number(input)) {\n\t            input = numeral.fn.unformat(input);\n\t        } else {\n\t            input = Number(input);\n\t        }\n\t\n\t        return new Numeral(input);\n\t    };\n\t\n\t    // version number\n\t    numeral.version = VERSION;\n\t\n\t    // compare numeral object\n\t    numeral.isNumeral = function(obj) {\n\t        return obj instanceof Numeral;\n\t    };\n\t\n\t\n\t    // This function will load languages and then set the global language.  If\n\t    // no arguments are passed in, it will simply return the current global\n\t    // language key.\n\t    numeral.language = function(key, values) {\n\t        if (!key) {\n\t            return options.currentLanguage;\n\t        }\n\t\n\t        key = key.toLowerCase();\n\t\n\t        if (key && !values) {\n\t            if (!languages[key]) {\n\t                throw new Error('Unknown language : ' + key);\n\t            }\n\t\n\t            options.currentLanguage = key;\n\t        }\n\t\n\t        if (values || !languages[key]) {\n\t            loadLanguage(key, values);\n\t        }\n\t\n\t        return numeral;\n\t    };\n\t\n\t    numeral.reset = function() {\n\t        for (var property in defaults) {\n\t            options[property] = defaults[property];\n\t        }\n\t    };\n\t\n\t    // This function provides access to the loaded language data.  If\n\t    // no arguments are passed in, it will simply return the current\n\t    // global language object.\n\t    numeral.languageData = function(key) {\n\t        if (!key) {\n\t            return languages[options.currentLanguage];\n\t        }\n\t\n\t        if (!languages[key]) {\n\t            throw new Error('Unknown language : ' + key);\n\t        }\n\t\n\t        return languages[key];\n\t    };\n\t\n\t    numeral.language('en', {\n\t        delimiters: {\n\t            thousands: ',',\n\t            decimal: '.'\n\t        },\n\t        abbreviations: {\n\t            thousand: 'k',\n\t            million: 'm',\n\t            billion: 'b',\n\t            trillion: 't'\n\t        },\n\t        ordinal: function(number) {\n\t            var b = number % 10;\n\t            return (~~(number % 100 / 10) === 1) ? 'th' :\n\t                (b === 1) ? 'st' :\n\t                (b === 2) ? 'nd' :\n\t                (b === 3) ? 'rd' : 'th';\n\t        },\n\t        currency: {\n\t            symbol: '$'\n\t        }\n\t    });\n\t\n\t    numeral.zeroFormat = function(format) {\n\t        options.zeroFormat = typeof(format) === 'string' ? format : null;\n\t    };\n\t\n\t    numeral.nullFormat = function (format) {\n\t        options.nullFormat = typeof(format) === 'string' ? format : null;\n\t    };\n\t\n\t    numeral.defaultFormat = function(format) {\n\t        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n\t    };\n\t\n\t    numeral.validate = function(val, culture) {\n\t        var _decimalSep,\n\t            _thousandSep,\n\t            _currSymbol,\n\t            _valArray,\n\t            _abbrObj,\n\t            _thousandRegEx,\n\t            languageData,\n\t            temp;\n\t\n\t        //coerce val to string\n\t        if (typeof val !== 'string') {\n\t            val += '';\n\t            if (console.warn) {\n\t                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n\t            }\n\t        }\n\t\n\t        //trim whitespaces from either sides\n\t        val = val.trim();\n\t\n\t        //if val is just digits return true\n\t        if ( !! val.match(/^\\d+$/)) {\n\t            return true;\n\t        }\n\t\n\t        //if val is empty return false\n\t        if (val === '') {\n\t            return false;\n\t        }\n\t\n\t        //get the decimal and thousands separator from numeral.languageData\n\t        try {\n\t            //check if the culture is understood by numeral. if not, default it to current language\n\t            languageData = numeral.languageData(culture);\n\t        } catch (e) {\n\t            languageData = numeral.languageData(numeral.language());\n\t        }\n\t\n\t        //setup the delimiters and currency symbol based on culture/language\n\t        _currSymbol = languageData.currency.symbol;\n\t        _abbrObj = languageData.abbreviations;\n\t        _decimalSep = languageData.delimiters.decimal;\n\t        if (languageData.delimiters.thousands === '.') {\n\t            _thousandSep = '\\\\.';\n\t        } else {\n\t            _thousandSep = languageData.delimiters.thousands;\n\t        }\n\t\n\t        // validating currency symbol\n\t        temp = val.match(/^[^\\d]+/);\n\t        if (temp !== null) {\n\t            val = val.substr(1);\n\t            if (temp[0] !== _currSymbol) {\n\t                return false;\n\t            }\n\t        }\n\t\n\t        //validating abbreviation symbol\n\t        temp = val.match(/[^\\d]+$/);\n\t        if (temp !== null) {\n\t            val = val.slice(0, -1);\n\t            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n\t                return false;\n\t            }\n\t        }\n\t\n\t        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\t\n\t        if (!val.match(/[^\\d.,]/g)) {\n\t            _valArray = val.split(_decimalSep);\n\t            if (_valArray.length > 2) {\n\t                return false;\n\t            } else {\n\t                if (_valArray.length < 2) {\n\t                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n\t                } else {\n\t                    if (_valArray[0].length === 1) {\n\t                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n\t                    } else {\n\t                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        return false;\n\t    };\n\t\n\t    /************************************\n\t        Helpers\n\t    ************************************/\n\t\n\t    function loadLanguage(key, values) {\n\t        languages[key] = values;\n\t    }\n\t\n\t    /************************************\n\t        Floating-point helpers\n\t    ************************************/\n\t\n\t    // The floating-point helper functions and implementation\n\t    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\t\n\t    // Production steps of ECMA-262, Edition 5, 15.4.4.21\n\t    // Reference: http://es5.github.io/#x15.4.4.21\n\t    if (!Array.prototype.reduce) {\n\t        Array.prototype.reduce = function(callback /*, initialValue*/) {\n\t            'use strict';\n\t            if (this === null) {\n\t                throw new TypeError('Array.prototype.reduce called on null or undefined');\n\t            }\n\t\n\t            if (typeof callback !== 'function') {\n\t                throw new TypeError(callback + ' is not a function');\n\t            }\n\t\n\t            var t = Object(this), len = t.length >>> 0, k = 0, value;\n\t\n\t            if (arguments.length === 2) {\n\t                value = arguments[1];\n\t            } else {\n\t                while (k < len && !(k in t)) {\n\t                    k++;\n\t                }\n\t\n\t                if (k >= len) {\n\t                    throw new TypeError('Reduce of empty array with no initial value');\n\t                }\n\t\n\t                value = t[k++];\n\t            }\n\t            for (; k < len; k++) {\n\t                if (k in t) {\n\t                    value = callback(value, t[k], k, t);\n\t                }\n\t            }\n\t            return value;\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Computes the multiplier necessary to make x >= 1,\n\t     * effectively eliminating miscalculations caused by\n\t     * finite precision.\n\t     */\n\t    function multiplier(x) {\n\t        var parts = x.toString().split('.');\n\t        if (parts.length < 2) {\n\t            return 1;\n\t        }\n\t        return Math.pow(10, parts[1].length);\n\t    }\n\t\n\t    /**\n\t     * Given a variable number of arguments, returns the maximum\n\t     * multiplier that must be used to normalize an operation involving\n\t     * all of them.\n\t     */\n\t    function correctionFactor() {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        return args.reduce(function(prev, next) {\n\t            var mp = multiplier(prev),\n\t                mn = multiplier(next);\n\t            return mp > mn ? mp : mn;\n\t        }, -Infinity);\n\t    }\n\t\n\t\n\t    /************************************\n\t        Numeral Prototype\n\t    ************************************/\n\t\n\t\n\t    numeral.fn = Numeral.prototype = {\n\t\n\t        clone: function() {\n\t            return numeral(this);\n\t        },\n\t\n\t        format: function (inputString, roundingFunction) {\n\t            return formatNumeral(this,\n\t                inputString ? inputString : options.defaultFormat,\n\t                roundingFunction !== undefined ? roundingFunction : Math.round\n\t            );\n\t        },\n\t\n\t        unformat: function (inputString) {\n\t            if (Object.prototype.toString.call(inputString) === '[object Number]') {\n\t                return inputString;\n\t            }\n\t\n\t            return unformatNumeral(this, inputString ? inputString : options.defaultFormat);\n\t        },\n\t\n\t        value: function() {\n\t            return this._value;\n\t        },\n\t\n\t        valueOf: function() {\n\t            return this._value;\n\t        },\n\t\n\t        set: function(value) {\n\t            this._value = Number(value);\n\t            return this;\n\t        },\n\t\n\t        add: function(value) {\n\t            var corrFactor = correctionFactor.call(null, this._value, value);\n\t\n\t            function cback(accum, curr, currI, O) {\n\t                return accum + corrFactor * curr;\n\t            }\n\t            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n\t            return this;\n\t        },\n\t\n\t        subtract: function(value) {\n\t            var corrFactor = correctionFactor.call(null, this._value, value);\n\t\n\t            function cback(accum, curr, currI, O) {\n\t                return accum - corrFactor * curr;\n\t            }\n\t            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;\n\t            return this;\n\t        },\n\t\n\t        multiply: function(value) {\n\t            function cback(accum, curr, currI, O) {\n\t                var corrFactor = correctionFactor(accum, curr);\n\t                return (accum * corrFactor) * (curr * corrFactor) /\n\t                    (corrFactor * corrFactor);\n\t            }\n\t            this._value = [this._value, value].reduce(cback, 1);\n\t            return this;\n\t        },\n\t\n\t        divide: function(value) {\n\t            function cback(accum, curr, currI, O) {\n\t                var corrFactor = correctionFactor(accum, curr);\n\t                return (accum * corrFactor) / (curr * corrFactor);\n\t            }\n\t            this._value = [this._value, value].reduce(cback);\n\t            return this;\n\t        },\n\t\n\t        difference: function(value) {\n\t            return Math.abs(numeral(this._value).subtract(value).value());\n\t        }\n\t\n\t    };\n\t\n\t    /************************************\n\t        Exposing Numeral\n\t    ************************************/\n\t\n\t    // CommonJS module is defined\n\t    if (typeof module !== 'undefined' && module.exports) {\n\t        module.exports = numeral;\n\t    }\n\t\n\t    /*global ender:false */\n\t    if (typeof ender === 'undefined') {\n\t        // here, `this` means `window` in the browser, or `global` on the server\n\t        // add `numeral` as a global object via a string identifier,\n\t        // for Closure Compiler 'advanced' mode\n\t        this['numeral'] = numeral;\n\t    }\n\t\n\t    /*global define:false */\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t            return numeral;\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    }\n\t}).call(this);\n\n\n/***/ }\n]);\n\n\n// WEBPACK FOOTER //\n// main.33f53d003b418046d7e5.js","import './index.css';\nimport numeral from 'numeral';\n\nconst courseValue = numeral(1000).format('$0,0.00');\nconsole.log(`I would pay ${courseValue} for this awesome course!`); // eslint-disable-line no-console\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/*! @preserve\n * numeral.js\n * version : 1.5.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function() {\n\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        VERSION = '1.5.6',\n        // internal storage for language config files\n        languages = {},\n        defaults = {\n            currentLanguage: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0'\n        },\n        options = {\n            currentLanguage: defaults.currentLanguage,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat\n        },\n        byteSuffixes = {\n            bytes: ['B','KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            iec: ['B','KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numeral prototype object\n    function Numeral(number) {\n        this._value = number;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed (value, maxDecimals, roundingFunction, optionals) {\n        var splitValue = value.toString().split('.'),\n            minDecimals = maxDecimals - (optionals || 0),\n            boundedPrecision,\n            optionalsRegExp,\n            power,\n            output;\n\n        // Use the smallest precision value possible to avoid errors from floating point representation\n        if (splitValue.length === 2) {\n          boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n        } else {\n          boundedPrecision = minDecimals;\n        }\n\n        power = Math.pow(10, boundedPrecision);\n\n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (roundingFunction(value * power) / power).toFixed(boundedPrecision);\n\n        if (optionals > maxDecimals - boundedPrecision) {\n            optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumeral(n, format, roundingFunction) {\n        var output;\n\n        if (n._value === 0 && options.zeroFormat !== null) {\n            output = options.zeroFormat;\n        } else if (n._value === null && options.nullFormat !== null) {\n            output = options.nullFormat;\n        } else {\n            // figure out what kind of format we are dealing with\n            if (format.indexOf('$') > -1) {\n                output = formatCurrency(n, format, roundingFunction);\n            } else if (format.indexOf('%') > -1) {\n                output = formatPercentage(n, format, roundingFunction);\n            } else if (format.indexOf(':') > -1) {\n                output = formatTime(n, format);\n            } else if (format.indexOf('b') > -1 || format.indexOf('ib') > -1) {\n                output = formatBytes(n, format, roundingFunction);\n            } else if (format.indexOf('o') > -1) {\n                output = formatOrdinal(n, format, roundingFunction);\n            } else {\n                output = formatNumber(n._value, format, roundingFunction);\n            }\n        }\n\n        return output;\n    }\n\n    function formatCurrency(n, format, roundingFunction) {\n        var symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            spliceIndex,\n            output;\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        output = formatNumber(n._value, format, roundingFunction, false);\n\n        // position the symbol\n        if (symbolIndex <= 1) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                spliceIndex = 1;\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {\n                    // the symbol appears before the \"(\" or \"-\"\n                    spliceIndex = 0;\n                }\n                output.splice(spliceIndex, 0, languages[options.currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[options.currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[options.currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[options.currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage(n, format, roundingFunction) {\n        var space = '',\n            output,\n            value = n._value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        if (output.indexOf(')') > -1) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatBytes(n, format, roundingFunction) {\n        var output,\n            suffixes = format.indexOf('ib') > -1 ? byteSuffixes.iec : byteSuffixes.bytes,\n            value = n._value,\n            suffix = '',\n            power,\n            min,\n            max;\n\n        // check for space before\n        if (format.indexOf(' b') > -1 || format.indexOf(' ib') > -1) {\n            suffix = ' ';\n            format = format.replace(' ib', '').replace(' b', '');\n        } else {\n            format = format.replace('ib', '').replace('b', '');\n        }\n\n        for (power = 0; power <= suffixes.length; power++) {\n            min = Math.pow(1024, power);\n            max = Math.pow(1024, power + 1);\n\n            if (value === null || value === 0 || value >= min && value < max) {\n                suffix += suffixes[power];\n\n                if (min > 0) {\n                    value = value / min;\n                }\n\n                break;\n            }\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        return output + suffix;\n    }\n\n    function formatOrdinal(n, format, roundingFunction) {\n        var output,\n            ordinal = '';\n\n        // check for space before\n        if (format.indexOf(' o') > -1) {\n            ordinal = ' ';\n            format = format.replace(' o', '');\n        } else {\n            format = format.replace('o', '');\n        }\n\n        ordinal += languages[options.currentLanguage].ordinal(n._value);\n\n        output = formatNumber(n._value, format, roundingFunction);\n\n        return output + ordinal;\n    }\n\n    function formatTime(n) {\n        var hours = Math.floor(n._value / 60 / 60),\n            minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function formatNumber(value, format, roundingFunction) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            abs,\n            min,\n            max,\n            power,\n            w,\n            precision,\n            thousands,\n            d = '',\n            neg = false;\n\n        if (value === null) {\n            value = 0;\n        }\n\n        abs = Math.abs(value);\n\n        // see if we should use parentheses for negative number or if we should prefix with a sign\n        // if both are present we default to parentheses\n        if (format.indexOf('(') > -1) {\n            negP = true;\n            format = format.slice(1, -1);\n        } else if (format.indexOf('+') > -1) {\n            signed = true;\n            format = format.replace(/\\+/g, '');\n        }\n\n        // see if abbreviation is wanted\n        if (format.indexOf('a') > -1) {\n            // check if abbreviation is specified\n            abbrK = format.indexOf('aK') >= 0;\n            abbrM = format.indexOf('aM') >= 0;\n            abbrB = format.indexOf('aB') >= 0;\n            abbrT = format.indexOf('aT') >= 0;\n            abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n            // check for space before abbreviation\n            if (format.indexOf(' a') > -1) {\n                abbr = ' ';\n            }\n\n            format = format.replace(new RegExp(abbr + 'a[KMBT]?'), '');\n\n            if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                // trillion\n                abbr = abbr + languages[options.currentLanguage].abbreviations.trillion;\n                value = value / Math.pow(10, 12);\n            } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                // billion\n                abbr = abbr + languages[options.currentLanguage].abbreviations.billion;\n                value = value / Math.pow(10, 9);\n            } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                // million\n                abbr = abbr + languages[options.currentLanguage].abbreviations.million;\n                value = value / Math.pow(10, 6);\n            } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                // thousand\n                abbr = abbr + languages[options.currentLanguage].abbreviations.thousand;\n                value = value / Math.pow(10, 3);\n            }\n        }\n\n\n        if (format.indexOf('[.]') > -1) {\n            optDec = true;\n            format = format.replace('[.]', '.');\n        }\n\n        w = value.toString().split('.')[0];\n        precision = format.split('.')[1];\n        thousands = format.indexOf(',');\n\n        if (precision) {\n            if (precision.indexOf('[') > -1) {\n                precision = precision.replace(']', '');\n                precision = precision.split('[');\n                d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n            } else {\n                d = toFixed(value, precision.length, roundingFunction);\n            }\n\n            w = d.split('.')[0];\n\n            if (d.indexOf('.') > -1) {\n                d = languages[options.currentLanguage].delimiters.decimal + d.split('.')[1];\n            } else {\n                d = '';\n            }\n\n            if (optDec && Number(d.slice(1)) === 0) {\n                d = '';\n            }\n        } else {\n            w = toFixed(value, null, roundingFunction);\n        }\n\n        // format number\n        if (w.indexOf('-') > -1) {\n            w = w.slice(1);\n            neg = true;\n        }\n\n        if (thousands > -1) {\n            w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[options.currentLanguage].delimiters.thousands);\n        }\n\n        if (format.indexOf('.') === 0) {\n            w = '';\n        }\n\n        return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((abbr) ? abbr : '') + ((negP && neg) ? ')' : '');\n    }\n\n\n    /************************************\n        Unformatting\n    ************************************/\n\n    // revert to number\n    function unformatNumeral(n, string) {\n        var stringOriginal = string,\n            thousandRegExp,\n            millionRegExp,\n            billionRegExp,\n            trillionRegExp,\n            bytesMultiplier = false,\n            power,\n            value;\n\n        if (string.indexOf(':') > -1) {\n            value = unformatTime(string);\n        } else {\n            if (string === options.zeroFormat || string === options.nullFormat) {\n                value = 0;\n            } else {\n                if (languages[options.currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(languages[options.currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                for (power = 1; power <= byteSuffixes.bytes.length; power++) {\n                    bytesMultiplier = ((string.indexOf(byteSuffixes.bytes[power]) > -1) || (string.indexOf(byteSuffixes.iec[power]) > -1))? Math.pow(1024, power) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                value = bytesMultiplier ? bytesMultiplier : 1;\n                value *= stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1;\n                value *= stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1;\n                value *= stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1;\n                value *= stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1;\n                // check for percentage\n                value *= string.indexOf('%') > -1 ? 0.01 : 1;\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n                // remove non numbers\n                value *= Number(string.replace(/[^0-9\\.]+/g, ''));\n                // round if we are talking about bytes\n                value = bytesMultiplier ? Math.ceil(value) : value;\n            }\n        }\n\n        n._value = value;\n\n        return n._value;\n    }\n    function unformatTime(string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }\n\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numeral = function(input) {\n        if (numeral.isNumeral(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (input === null) {\n            input = null;\n        } else if (!Number(input)) {\n            input = numeral.fn.unformat(input);\n        } else {\n            input = Number(input);\n        }\n\n        return new Numeral(input);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    numeral.language = function(key, values) {\n        if (!key) {\n            return options.currentLanguage;\n        }\n\n        key = key.toLowerCase();\n\n        if (key && !values) {\n            if (!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n\n            options.currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    // This function provides access to the loaded language data.  If\n    // no arguments are passed in, it will simply return the current\n    // global language object.\n    numeral.languageData = function(key) {\n        if (!key) {\n            return languages[options.currentLanguage];\n        }\n\n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n\n        return languages[key];\n    };\n\n    numeral.language('en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            languageData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if ( !! val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.languageData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current language\n            languageData = numeral.languageData(culture);\n        } catch (e) {\n            languageData = numeral.languageData(numeral.language());\n        }\n\n        //setup the delimiters and currency symbol based on culture/language\n        _currSymbol = languageData.currency.symbol;\n        _abbrObj = languageData.abbreviations;\n        _decimalSep = languageData.delimiters.decimal;\n        if (languageData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = languageData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function loadLanguage(key, values) {\n        languages[key] = values;\n    }\n\n    /************************************\n        Floating-point helpers\n    ************************************/\n\n    // The floating-point helper functions and implementation\n    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\n    // Production steps of ECMA-262, Edition 5, 15.4.4.21\n    // Reference: http://es5.github.io/#x15.4.4.21\n    if (!Array.prototype.reduce) {\n        Array.prototype.reduce = function(callback /*, initialValue*/) {\n            'use strict';\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(this), len = t.length >>> 0, k = 0, value;\n\n            if (arguments.length === 2) {\n                value = arguments[1];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        };\n    }\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    function multiplier(x) {\n        var parts = x.toString().split('.');\n        if (parts.length < 2) {\n            return 1;\n        }\n        return Math.pow(10, parts[1].length);\n    }\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    function correctionFactor() {\n        var args = Array.prototype.slice.call(arguments);\n        return args.reduce(function(prev, next) {\n            var mp = multiplier(prev),\n                mn = multiplier(next);\n            return mp > mn ? mp : mn;\n        }, -Infinity);\n    }\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n\n    numeral.fn = Numeral.prototype = {\n\n        clone: function() {\n            return numeral(this);\n        },\n\n        format: function (inputString, roundingFunction) {\n            return formatNumeral(this,\n                inputString ? inputString : options.defaultFormat,\n                roundingFunction !== undefined ? roundingFunction : Math.round\n            );\n        },\n\n        unformat: function (inputString) {\n            if (Object.prototype.toString.call(inputString) === '[object Number]') {\n                return inputString;\n            }\n\n            return unformatNumeral(this, inputString ? inputString : options.defaultFormat);\n        },\n\n        value: function() {\n            return this._value;\n        },\n\n        valueOf: function() {\n            return this._value;\n        },\n\n        set: function(value) {\n            this._value = Number(value);\n            return this;\n        },\n\n        add: function(value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + corrFactor * curr;\n            }\n            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n            return this;\n        },\n\n        subtract: function(value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - corrFactor * curr;\n            }\n            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;\n            return this;\n        },\n\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) * (curr * corrFactor) /\n                    (corrFactor * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback, 1);\n            return this;\n        },\n\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) / (curr * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback);\n            return this;\n        },\n\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n\n    };\n\n    /************************************\n        Exposing Numeral\n    ************************************/\n\n    // CommonJS module is defined\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = numeral;\n    }\n\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `numeral` as a global object via a string identifier,\n        // for Closure Compiler 'advanced' mode\n        this['numeral'] = numeral;\n    }\n\n    /*global define:false */\n    if (typeof define === 'function' && define.amd) {\n        define([], function() {\n            return numeral;\n        });\n    }\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/numeral/numeral.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}